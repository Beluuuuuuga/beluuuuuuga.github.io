<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on home</title>
    <link>https://beluuuuuuga.github.io/</link>
    <description>Recent content in Home on home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://beluuuuuuga.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OpenCV4使い方</title>
      <link>https://beluuuuuuga.github.io/post/2020/02/04/opencv4%E4%BD%BF%E3%81%84%E6%96%B9/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/02/04/opencv4%E4%BD%BF%E3%81%84%E6%96%B9/</guid>
      <description>輪郭描画  一番参考にしたサイト OpenCVのfindContoursを利用した文字切り出し OpenCVは2値画像では白をモノとして認識する 移動する物体を追跡する void findContours(const Mat&amp;amp; image, vector &amp;gt;&amp;amp; contours, int mode, int method, Point offset=Point()) cv::findContours OpenCV4でのグレースケール変換はOpenCV3と異なる Compile error in the examples with OpenCV 4.0.0-alpha 
#include &amp;lt;opencv2/opencv.hpp&amp;gt; #include &amp;lt;vector&amp;gt; //最小座標を求める cv::Point minPoint(vector&amp;lt;cv::Point&amp;gt; contours) { double minx = contours.at(0).x; double miny = contours.at(0).y; for (int i = 1; i&amp;lt;contours.size(); i++) { if (minx &amp;gt; contours.at(i).x) { minx = contours.at(i).x; } if (miny &amp;gt; contours.at(i).y) { miny = contours.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;メモ</title>
      <link>https://beluuuuuuga.github.io/post/2020/01/29/c-%E3%83%A1%E3%83%A2/</link>
      <pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/01/29/c-%E3%83%A1%E3%83%A2/</guid>
      <description>ポインタ  const char* :データ　変更不可、アドレス　変更可 char* const :データ　変更可、アドレス　変更不可 const char* const :データ　変更不可、アドレス　変更不可 ポインタがさすデータのアクセスは * アドレス代入
int num = 100 int *intptr = &amp;amp;num  C++ポインタまとめ
  アロー演算子  ポインタを宣言=&amp;gt;newで動的確保=&amp;gt;アロー演算子でアクセス 変数からのメンバ関数呼び出し=&amp;gt;ドット演算子  オブジェクトはスタック領域  ポインタからのメンバ関数呼び出し=&amp;gt; アロー演算子  オブジェクトはヒープ領域  クラスの使い方 
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;iostream&amp;gt; class TEST { public: int figure; void calc(int temp) { figure = temp; std::cout &amp;lt;&amp;lt; temp &amp;lt;&amp;lt; std::endl; } }; int main() { TEST *test; // class pointer test = new TEST; //new を使用して動的確保 test-&amp;gt;calc(10); // アロー演算子を使用して関数にアクセス std::cout &amp;lt;&amp;lt; test-&amp;gt;figure &amp;lt;&amp;lt; std::endl; delete test; return 0; }   コピーコンストラクタとコピー代入演算子  使い方</description>
    </item>
    
    <item>
      <title>Effective C&#43;&#43; 第3版</title>
      <link>https://beluuuuuuga.github.io/post/2020/01/27/effective-c-%E7%AC%AC3%E7%89%88/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/01/27/effective-c-%E7%AC%AC3%E7%89%88/</guid>
      <description>3項　できるだけconstを使おう  constオブジェクトはconstのメンバ関数のみで使用できる 1,2
#include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; using namespace std; class Sample { private: string value; public: Sample(const char* a): value(a){} void unconst_func() { cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; endl; } void const_func() const { cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; endl; } }; int main() { const Sample a(&amp;quot;a&amp;quot;); // constオブジェクト a.unconst_func(); // エラー a.const_func(); // エラーでない }   4項　オブジェクトは、使う前に初期化しよう 5項　C++が自動生成・呼び出しするクラスメンバを知っておこう 6項　コンパイラが自動生成することを望まない関数は、使用を禁止しよう  コピーコンストラクタやコピー代入演算子を望まない場合、基底クラスで禁止しておく 方法として、Privateで書く</description>
    </item>
    
    <item>
      <title>1月振り返り</title>
      <link>https://beluuuuuuga.github.io/post/2020/01/26/1%E6%9C%88%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A/</link>
      <pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/01/26/1%E6%9C%88%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A/</guid>
      <description> 課題  C++をどこまでのレベルで身に付け、どの様にして身に付けるか？  業務で困らないレベル、競技プログラミングなど通してSTL学ぶ  画像処理も上と同じ  C++は一般的な使い方をマスター、Pythonは深層学習などもマスター   </description>
    </item>
    
    <item>
      <title>Mastering Data Structures &amp; Algorithms using C and C&#43;&#43;</title>
      <link>https://beluuuuuuga.github.io/post/2020/01/25/mastering-data-structures-algorithms-using-c-and-c-/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/01/25/mastering-data-structures-algorithms-using-c-and-c-/</guid>
      <description> セクション1: Before we Start 1.Instructor&amp;rsquo;s Note  コースの最後にプログラミングをホワイトボードを見ながら自分で実施  2.Introduction  データがなければプログラミングできない データを扱うためにデータ構造を選択する必要がある physical data structure と logical data structureがある データ構造を知らないとITのプロになることができないし、データ構造なしではアプリケーションを作ることはできない データ構造の理解は3段階  1.データ構造とは何かとどの様に動くのかを知る 2.データ構造を詳細に知り、分析する事ができる 3.全てを詳細に知り、自分自身でコーディングする事ができる  すでにプログラミング言語では、データ構造はライブラリで存在しているので、レベル１で十分 再帰はとても大事で、再帰からループに書き換えることもできる  セクション2: Essential C and C++ Concepts 3.Arrays Basics  C and C++のコンセプトを説明 arrayとは整数もしくは小数のデータセット  4.Structures 5.Pointers 6.Reference in C++ 7.Pointer to Structure 8.Functions </description>
    </item>
    
    <item>
      <title>OpenCV4を用いた画像処理プログラミング入門</title>
      <link>https://beluuuuuuga.github.io/post/2020/01/24/opencv4%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E7%94%BB%E5%83%8F%E5%87%A6%E7%90%86%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80/</link>
      <pubDate>Fri, 24 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/01/24/opencv4%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E7%94%BB%E5%83%8F%E5%87%A6%E7%90%86%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80/</guid>
      <description>1.イントロダクション  講師:浦西友樹（うらにし　ゆうき）  どのようにして本を見つけたか？  本はどこにある？などの物体認識は難しい 目から画像を入力→知識から本の特徴を推定→画像から自分の知っている本に似た物体を探す  画像処理・認識技術の応用例  スマイルシャッター:2000年代の商品は課題を簡単にして処理していた。人間の顔は似ているので処理できる アイサイト:限られた状態でしかありえない 問題が一般化すると課題を難しくなる  コンピュータにおけ画像のデータ構造  コンピュータにおける画像は、1画素（ピクセル）の並び スマホですら4K, 2K（800dpi）→普通はどれくらいなのか？ 画素は青・緑・赤が並び正方形 255 = 2^8 - 1 :1画素あたり24(8*3)ビットある: 10000ぐらい 画素密度は50倍ぐらいであるが、1画素は長年変化ない 300dpi(dot / inchi)が人間がアナログデータとデジタルを認識できる限界: 大画面でみるとdpiが下がる: 物理的にテレビの限界がある ディスプレイが明るさを出せる幅は人間が対応できる（知覚できる）幅に対して狭いので24ビットから変化がない  C言語による画像処理プログラミング  データに対するアクセスは配列に対する処理 ビットマップファイルはヘッダに書かれた画像情報を読み取る必要がある（縦1000*横1000 OR 縦1*横10000） エンコードされたデータを扱うためにデータ構造を理解しておく必要がある（デコードするために） ビットマップファイルを読み込んで処理はアップルウォッチでさえできる  OpenCV(Open Conputer Vision Library)  1990年代にIntelが開発していたImageProcessingLibraryが元 Intel→2008 Willow Garage→Intel: 開発者の移動に伴っている BSD(Berkeley Software Distribution)ライセンスに基づいている マルチプロットフォーム(win/linux/mac/ios/and, c/c++/python/java) バックエンドでCPU/GPU 現在2000万ヒットとデファクトスタンダードとなっている ダウンロードトップカントリーはかつてはアメリカ・日本だが、現在は中国がトップ。韓国・日本が３番手を争う CLIではダウンロードカウントされない  OpenCVでできること  画像に関することはなんでもできる  OpenCVの利点  産総研ではspyderやMatlabなどのライブラリがあったが、2000にでてきたOpenCVは簡単である 簡単:インストール方法が確立、最新アルゴリズムも関数を呼び出すことで組み込める ライブラリを用いているが、早い BSDライセンスなので、商用利用であってもライセンス表示するのみで、ソースコードを公開することなく利用できる  OpenCVのバージョンの変遷  2006.</description>
    </item>
    
    <item>
      <title>CMakeまとめ</title>
      <link>https://beluuuuuuga.github.io/post/2020/01/23/cmake%E3%81%BE%E3%81%A8%E3%82%81/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/01/23/cmake%E3%81%BE%E3%81%A8%E3%82%81/</guid>
      <description>Examples Source: OpenCVの場合  CmakeLists.txt
cmake_minimum_required(VERSION 2.8) project( DisplayImage ) find_package( OpenCV REQUIRED ) include_directories( ${OpenCV_INCLUDE_DIRS} ) add_executable( DisplayImage DisplayImage.cpp ) target_link_libraries( DisplayImage ${OpenCV_LIBS} )  DisplayImage.cpp
#include &amp;quot;opencv2\\opencv.hpp&amp;quot; int _tmain(int argc, _TCHAR* argv[]) { //表示ウィンドウの作成 cvNamedWindow(&amp;quot;img&amp;quot;); //処理後画像データの確保 IplImage* img = cvCreateImage(cvSize(320,240), IPL_DEPTH_8U, 1); //白色 cvSet(img, cvScalarAll (255), 0); //画像の表示 cvShowImage (&amp;quot;img&amp;quot;, img); //キー入力待ち cvWaitKey (0); //全てのウィンドウの削除 cvDestroyAllWindows(); //画像データの解放 cvReleaseImage(&amp;amp;img); return 0; }  build/Debug/Display.exeファイルが作成されるので、実行し小さいwindowが作成されれば完了
Debug\DisplayImage.exe   Usages ビルド  buildディレクトリを作成し、移動 Visual Studioのバージョンによってビルド方法変更</description>
    </item>
    
    <item>
      <title>HUGOまとめ</title>
      <link>https://beluuuuuuga.github.io/post/2020/01/23/hugo%E3%81%BE%E3%81%A8%E3%82%81/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/01/23/hugo%E3%81%BE%E3%81%A8%E3%82%81/</guid>
      <description> windowsへのインストール  chocolateyインストールのためにコマンドプロンプトに以下のコマンドを記入
@&amp;quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&amp;quot; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &amp;quot;iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&amp;quot; &amp;amp;&amp;amp; SET &amp;quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&amp;quot;  hugoインストール
choco install hugo -confirm  hugo.exeのフォルダを環境変数に保存
  つまりそうな部分  .mdファイルの中でdraft:true（下書き状態）にして.htmlが生成されなかった。draft部分を削除すれば.htmlが作成される ファイルを編集していて、サブモジュールのusername.io.gitが更新されない場合、サブモジュールを解除し、再びサブモジュールする。また、.gitが消えてしまってる可能性があるので元のリポジトリからコピーする  Tips  .mdでの論文形式の注釈の付け方
# 上に番号をつける &amp;lt;sup&amp;gt;&amp;lt;a href=#1&amp;gt;*1&amp;lt;/a&amp;gt;&amp;lt;sup&amp;gt; # 下のリファレンス &amp;lt;a href=#1&amp;gt;*1&amp;lt;/a&amp;gt;:[Name](URL)  HOMEでない時の条件式
{{if ne .IsHome true }}   </description>
    </item>
    
    <item>
      <title>OpenCV4環境構築</title>
      <link>https://beluuuuuuga.github.io/post/2020/01/23/opencv4%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/01/23/opencv4%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/</guid>
      <description> Environment Windows  公式からインストール。Releasesを参照*1 展開し環境変数にbinまで登録　C:\OpenCV\OpenCV34\opencv\build\x64\vc14\bin VisualStudioで新しいプロジェクトを作成 プロジェクトのプロパティのインクルードディレクトリ・リンカのライブラリ・入力の依存ファイル(Releaseはdなし、Debugはdあり)を登録 テストを行いビルドし、小さい窓が出れば完了
#include &amp;lt;opencv2/opencv.hpp&amp;gt; using namespace cv; int main() { Mat image = Mat::zeros(100, 100, CV_8UC3); imshow(&amp;quot;&amp;quot;, image); waitKey(0); }  はまりやすいポイントととして、リンカーの入力ファイルをwindowsのGUI上で見ると.libが消えており、ビルドできなかった
 OpenCV4系でコードを書いているサイトを検索するように心がける。本当はビルドできるのにビルドできてないと怒られたので*5
  References  *1:Releases *2:【覚書】VisualStudioでOpenCVを使う場合の簡単な各種設定（Windows10 64Bit版用）【環境構築】 *3:KinectV2 VisualStudio2017でのLNK2019 *4:Visual Studio 2015でOpenCV 3.4環境構築(Windows10) *5:OpenCV 4.2.0をVisual Studio 2019から使用する時の手順  </description>
    </item>
    
    <item>
      <title>TensorFlow &amp; Kerasのモデル</title>
      <link>https://beluuuuuuga.github.io/post/2020/01/23/tensorflow-keras%E3%81%AE%E3%83%A2%E3%83%87%E3%83%AB/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/01/23/tensorflow-keras%E3%81%AE%E3%83%A2%E3%83%87%E3%83%AB/</guid>
      <description>Knowledge Model  Tensorflowのモデルはmodel-ckpt.meta, model-ckpt.data-0000-of-00001, model-ckpt.index, checkpointの4つの変数を持つ*1 ウェブサイトなどでデプロイするときに一つにまとめた.pbファイルにする kerasで保存する対象とそのコード。くわしくは下記サイトを参照*2     保存の関数 読み込みの関数 対象(拡張子)     model.save(&amp;lsquo;hoge.h5&amp;rsquo;) model = load_model(&amp;lsquo;hoge.h5&amp;rsquo;) アーキテクチャ + 重み + オプティマイザの状態（.hdf5 or .h）   json_string = model.to_json() model = model_from_json(json_string) モデルのアーキテクチャ（weightパラメータや学習時の設定は含まない）(.json or .yml)   model.save_weights(&amp;lsquo;hoge.h5&amp;rsquo;) model.load_weights(&amp;lsquo;hoge.h5&amp;rsquo;) モデルの重みのみ(.hdf5 or .h)    References  *1:Freeze Tensorflow models and serve on web *2:Keras FAQ: Kerasに関するよくある質問  TF2.0 Model save and load  .</description>
    </item>
    
    <item>
      <title>Tensorflow C APIまとめ</title>
      <link>https://beluuuuuuga.github.io/post/2020/01/23/tensorflow-c-api%E3%81%BE%E3%81%A8%E3%82%81/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/01/23/tensorflow-c-api%E3%81%BE%E3%81%A8%E3%82%81/</guid>
      <description>============
CMake Source  OpenCVのディレクトリ・ライブラリをInterfaceプロジェクトに紐づけている
cmake_minimum_required(VERSION 3.6) project(hello_tf) set(CMAKE_CXX_STANDARD 11) set(CMAKE_CXX_STANDARD_REQUIRED ON) set(CMAKE_CXX_EXTENSIONS OFF) if((CMAKE_CXX_COMPILER_ID MATCHES &amp;quot;GNU&amp;quot;) OR (CMAKE_CXX_COMPILER_ID MATCHES &amp;quot;Clang&amp;quot;)) set(CMAKE_VERBOSE_MAKEFILE ON) add_compile_options(-Wall -Wextra -pedantic-errors -Werror) elseif(CMAKE_CXX_COMPILER_ID MATCHES &amp;quot;MSVC&amp;quot;) add_compile_options(/W4 /WX) if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19.11) add_compile_options(/permissive-) endif() endif() if (NOT EXISTS ${CMAKE_SOURCE_DIR}/tensorflow) make_directory(${CMAKE_SOURCE_DIR}/tensorflow) endif() if(UNIX AND NOT APPLE) if (NOT EXISTS ${CMAKE_SOURCE_DIR}/tensorflow) make_directory(${CMAKE_SOURCE_DIR}/tensorflow) endif() if (NOT EXISTS ${CMAKE_SOURCE_DIR}/tensorflow/lib/libtensorflow.so) file( DOWNLOAD https://github.com/Neargye/tensorflow/releases/download/v1.15.0/libtensorflow-cpu-linux-x86_64-1.15.0.tar.gz ${CMAKE_SOURCE_DIR}/tensorflow/linux.tar.gz STATUS status LOG log ) list(GET status 0 status_code) list(GET status 1 status_string) if(NOT status_code EQUAL 0) message(FATAL_ERROR &amp;quot;error downloading tensorflow lib: ${status_string}&amp;quot; &amp;quot;${log}&amp;quot;) endif() execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvzf ${CMAKE_SOURCE_DIR}/tensorflow/linux.</description>
    </item>
    
    <item>
      <title>Markdown Guide (modified)</title>
      <link>https://beluuuuuuga.github.io/post/2018/08/30/markdown-guide-modified/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2018/08/30/markdown-guide-modified/</guid>
      <description>An h1 header Paragraphs are separated by a blank line.
2nd paragraph. Italic, bold, and monospace. Itemized lists look like:
 this one that one the other one  Note that &amp;mdash; not considering the asterisk &amp;mdash; the actual text content starts at 4-columns in.
 Block quotes are written like so.
They can span multiple paragraphs, if you like.
 Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex.</description>
    </item>
    
    <item>
      <title>普段参照するサイト</title>
      <link>https://beluuuuuuga.github.io/sites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/sites/</guid>
      <description> 質問版  stackoverflow Quora Qiita  機械学習  Kaggle  OpenSource  Keras Documentation TensorFlow Blog NumPy Documentation  論文  UNet-family  </description>
    </item>
    
  </channel>
</rss>