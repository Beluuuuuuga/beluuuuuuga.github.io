<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ComputerVision on home</title>
    <link>https://beluuuuuuga.github.io/categories/computervision/</link>
    <description>Recent content in ComputerVision on home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://beluuuuuuga.github.io/categories/computervision/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OpenCV4使い方</title>
      <link>https://beluuuuuuga.github.io/post/2020/02/04/opencv4%E4%BD%BF%E3%81%84%E6%96%B9/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/02/04/opencv4%E4%BD%BF%E3%81%84%E6%96%B9/</guid>
      <description>輪郭描画  一番参考にしたサイト OpenCVのfindContoursを利用した文字切り出し OpenCVは2値画像では白をモノとして認識する 移動する物体を追跡する void findContours(const Mat&amp;amp; image, vector &amp;gt;&amp;amp; contours, int mode, int method, Point offset=Point()) cv::findContours OpenCV4でのグレースケール変換はOpenCV3と異なる Compile error in the examples with OpenCV 4.0.0-alpha 
#include &amp;lt;opencv2/opencv.hpp&amp;gt; #include &amp;lt;vector&amp;gt; //最小座標を求める cv::Point minPoint(vector&amp;lt;cv::Point&amp;gt; contours) { double minx = contours.at(0).x; double miny = contours.at(0).y; for (int i = 1; i&amp;lt;contours.size(); i++) { if (minx &amp;gt; contours.at(i).x) { minx = contours.at(i).x; } if (miny &amp;gt; contours.at(i).y) { miny = contours.</description>
    </item>
    
    <item>
      <title>OpenCV4を用いた画像処理プログラミング入門</title>
      <link>https://beluuuuuuga.github.io/post/2020/01/24/opencv4%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E7%94%BB%E5%83%8F%E5%87%A6%E7%90%86%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80/</link>
      <pubDate>Fri, 24 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/01/24/opencv4%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E7%94%BB%E5%83%8F%E5%87%A6%E7%90%86%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80/</guid>
      <description>1.イントロダクション  講師:浦西友樹（うらにし　ゆうき）  どのようにして本を見つけたか？  本はどこにある？などの物体認識は難しい 目から画像を入力→知識から本の特徴を推定→画像から自分の知っている本に似た物体を探す  画像処理・認識技術の応用例  スマイルシャッター:2000年代の商品は課題を簡単にして処理していた。人間の顔は似ているので処理できる アイサイト:限られた状態でしかありえない 問題が一般化すると課題を難しくなる  コンピュータにおけ画像のデータ構造  コンピュータにおける画像は、1画素（ピクセル）の並び スマホですら4K, 2K（800dpi）→普通はどれくらいなのか？ 画素は青・緑・赤が並び正方形 255 = 2^8 - 1 :1画素あたり24(8*3)ビットある: 10000ぐらい 画素密度は50倍ぐらいであるが、1画素は長年変化ない 300dpi(dot / inchi)が人間がアナログデータとデジタルを認識できる限界: 大画面でみるとdpiが下がる: 物理的にテレビの限界がある ディスプレイが明るさを出せる幅は人間が対応できる（知覚できる）幅に対して狭いので24ビットから変化がない  C言語による画像処理プログラミング  データに対するアクセスは配列に対する処理 ビットマップファイルはヘッダに書かれた画像情報を読み取る必要がある（縦1000*横1000 OR 縦1*横10000） エンコードされたデータを扱うためにデータ構造を理解しておく必要がある（デコードするために） ビットマップファイルを読み込んで処理はアップルウォッチでさえできる  OpenCV(Open Conputer Vision Library)  1990年代にIntelが開発していたImageProcessingLibraryが元 Intel→2008 Willow Garage→Intel: 開発者の移動に伴っている BSD(Berkeley Software Distribution)ライセンスに基づいている マルチプロットフォーム(win/linux/mac/ios/and, c/c++/python/java) バックエンドでCPU/GPU 現在2000万ヒットとデファクトスタンダードとなっている ダウンロードトップカントリーはかつてはアメリカ・日本だが、現在は中国がトップ。韓国・日本が３番手を争う CLIではダウンロードカウントされない  OpenCVでできること  画像に関することはなんでもできる  OpenCVの利点  産総研ではspyderやMatlabなどのライブラリがあったが、2000にでてきたOpenCVは簡単である 簡単:インストール方法が確立、最新アルゴリズムも関数を呼び出すことで組み込める ライブラリを用いているが、早い BSDライセンスなので、商用利用であってもライセンス表示するのみで、ソースコードを公開することなく利用できる  OpenCVのバージョンの変遷  2006.</description>
    </item>
    
    <item>
      <title>OpenCV4環境構築</title>
      <link>https://beluuuuuuga.github.io/post/2020/01/23/opencv4%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://beluuuuuuga.github.io/post/2020/01/23/opencv4%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/</guid>
      <description> Environment Windows  公式からインストール。Releasesを参照*1 展開し環境変数にbinまで登録　C:\OpenCV\OpenCV34\opencv\build\x64\vc14\bin VisualStudioで新しいプロジェクトを作成 プロジェクトのプロパティのインクルードディレクトリ・リンカのライブラリ・入力の依存ファイル(Releaseはdなし、Debugはdあり)を登録 テストを行いビルドし、小さい窓が出れば完了
#include &amp;lt;opencv2/opencv.hpp&amp;gt; using namespace cv; int main() { Mat image = Mat::zeros(100, 100, CV_8UC3); imshow(&amp;quot;&amp;quot;, image); waitKey(0); }  はまりやすいポイントととして、リンカーの入力ファイルをwindowsのGUI上で見ると.libが消えており、ビルドできなかった
 OpenCV4系でコードを書いているサイトを検索するように心がける。本当はビルドできるのにビルドできてないと怒られたので*5
  References  *1:Releases *2:【覚書】VisualStudioでOpenCVを使う場合の簡単な各種設定（Windows10 64Bit版用）【環境構築】 *3:KinectV2 VisualStudio2017でのLNK2019 *4:Visual Studio 2015でOpenCV 3.4環境構築(Windows10) *5:OpenCV 4.2.0をVisual Studio 2019から使用する時の手順  </description>
    </item>
    
  </channel>
</rss>